// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserRole {
  ADMIN
  COMMERCIAL
  BUSINESS
  PERSONAL
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?   @unique
  role          UserRole  @default(USER)
  currency      String?
  active        Boolean   @default(false)
  referralCode  String?   @unique @default(uuid())
  referredById  String?
  referredBy    User?     @relation("UserReferrals", fields: [referredById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  referrals     User[]    @relation("UserReferrals")
  hasFirstDeposit Boolean @default(false)

  countryId     String
  country       Country     @relation(fields: [countryId], references: [id])

  accounts      Account[]
  sessions      Session[]
  bankAccounts  BankAccount[]
  transactions  Transaction[]
  organisation  Organisation?
  kyc           Kyc[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([countryId])
  @@index([referredById])
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum KycType {
  PERSONAL
  BUSINESS
}

model Kyc {
  id              String    @id @default(cuid())
  type            KycType   @default(PERSONAL)
  status          KycStatus @default(PENDING)
  userId          String    
  user            User      @relation(fields: [userId], references: [id])

  // Personnal informations
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  nationality     String
  
  // Personnal informations documents
  idType          String?
  idNumber        String?
  idExpirationDate DateTime?

  // uploaded documents
  niu             String?   @unique
  idPicture       String?   @unique
  idOnHand        String?   @unique
  entirePhoto     String?   @unique
  locationPlan    String?   @unique

  // Metadatas
  submittedAt     DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reviewedAt      DateTime?
  reviewedBy      String?   // ID de l'admin qui a examiné la demande
  rejectionReason String?

  organisation    Organisation?

  @@index([userId])
  @@index([niu])
  @@index([idPicture])
  @@index([idOnHand])
  @@index([locationPlan])

  @@unique([userId, type])
}

model Organisation {
  id        String  @id @default(cuid())
  name      String
  type      String
  logo      String?
  isValid   Boolean @default(false)

  userId    String  @unique
  kycId     String  @unique
  isProcessing    Boolean   @default(true)

  organisationDocument  String? @unique
  founderDocument       String? @unique

  user      User    @relation(fields: [userId], references: [id])
  kyc       Kyc     @relation(fields: [kycId], references: [id])
  bankAccounts BankAccount[]

  @@index([userId])
}

model BankAccount {
  id            String      @id @default(cuid())
  name          String
  type          AccountType @default(epargne)
  currency      Currency    @default(XAF)
  rib           String      @unique
  amount        Float       @default(0)
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  organisationId String?
  organisation  Organisation? @relation(fields: [organisationId], references: [id])
  
  // Transactions liées à ce compte
  fromTransactions Transaction[] @relation("FromAccount")
  toTransactions   Transaction[] @relation("ToAccount")
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([organisationId])
}

model Country {
  id          String   @id @default(cuid())
  name        String
  code        String
  users       User[]

  @@unique([name, code])
}

enum AccountType {
  epargne
  courant
  business
}

enum Currency {
  XAF
  EUR
  USD
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REJECTED
  CANCELLED
}

model Category {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("income")
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  transactions Transaction[] @relation("TransactionCategories")

  @@unique([name, type])
}

model TransactionFeeRange {
  id              String   @id @default(cuid())
  minAmount       Float
  maxAmount       Float
  feePercentage   Float
  fixedFee        Float
  minFee          Float
  maxFee          Float
  transactionType TransactionType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transaction_fee_ranges")
}

model AdminSettings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admin_settings")
}

model Transaction {
  id            String    @id @default(cuid())
  type          TransactionType
  amount        Float
  fee           Float     @default(0)
  description   String?
  status        TransactionStatus @default(PENDING)
  isAffiliateReward Boolean @default(false)
  affiliateRewardForTransactionId String?
  affiliateRewardTransaction Transaction? @relation("AffiliateReward", fields: [affiliateRewardForTransactionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  affiliateRewards Transaction[] @relation("AffiliateReward")

  reviewedAt      DateTime?
  reviewedBy      String?   // ID de l'admin qui a examiné la demande
  rejectionReason String?
  
  // Comptes source et destination
  fromAccountId String?
  fromAccount   BankAccount?      @relation("FromAccount", fields: [fromAccountId], references: [id])
  
  toAccountId   String?
  toAccount     BankAccount?      @relation("ToAccount", fields: [toAccountId], references: [id])
  
  // Utilisateur qui a initié la transaction
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  categories Category[] @relation("TransactionCategories")

  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([userId])
  @@index([affiliateRewardForTransactionId])
}

model MonthHistory {
  userId          String
  bankAccountId   String
  day             Int
  month           Int
  year            Int
  income          Float
  expense         Float

  @@id([day, month, year, userId, bankAccountId])
}

model YearHistory {
  userId          String
  bankAccountId   String
  month           Int
  year            Int
  income          Float
  expense         Float

  @@id([month, year, userId, bankAccountId])
}